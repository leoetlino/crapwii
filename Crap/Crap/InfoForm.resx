<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="txtInfo.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="txtInfo.Text" xml:space="preserve">
    <value>Notes regarding the program
---------------------------------------------------------------------
REQUIREMENTS
-------------------
You should have common-key in the shared folder in order
to use this program. You need at least .Net Framework 2.0
for the program to work. 

Simply choose one of 4 methods to create channels easily,
Banner, iso or wbfs... along with 2.0 using a channel. 
Channel source is for nand emulation with triiforce.

DISC BANNERS
------------------
If you have the banner already, click the ellipsis button next to 
label banner and select a banner file. Banner file should end with
the disc id. Say for Wii sports it can be, Wii Sports-RSPE01.bnr, 
RSPE01.bnr, BlahBlah-RSPE01.bnr or similar. The key is in the 
ending.

ISO
-----
Simply open the iso, any alt-dol in the iso will be copied to the 
alt-dol folder and the banner of the game will be copied to the 
Banners folder so you can later re-create channels for the very
game.

WBFS
-------
Like iso, important stuff (alt-dols, banner) will be copied to their
respective folders.

Then you can select a loader and it's options... finally creating 
the actual channel.

CHANNEL(WAD) BANNERS FOR TRIIFORCE
-----------------------------------------------------
If you have the banner already, click the ellipsis button next to 
label banner and select a banner file. Banner file should end with
the title id. Banners from channels should have an extension cbnr
unlike banners for disc games which have extension bnr.

CHANNEL
------------
Click the ellipsis button and just point to a wad. Program will extract
the banner of the game and get the title id information for you and 
archive the banner into the banners folder. Then program will 
proceed as if you selected that banner. Extracted wad's contents 
are stored in tempwad folder and will not be cleaned by the program.
You can do it if you want.

BATCH MODE
----------------
If you want to create lots of channels for lots of banners then 
simply grab them all from an explorer page and drop it to the 
program window. Batch mode will be activated and with the 
selection of loader and options you can create channels for all
the banners with a single click.

Along with version 1.5, I reorganized the folders used. 
Here is a brief information about them :

Loaders (loaders reside here, if you want to add one, just copy here
and modify Crap.cfg in the root folder accordingly..

Muzak (The music you are listening right now stored here)

Shared (common-key should be here)

Wad (Create wads will be stored here)

Temp (Wad unpacking &amp; packing done here)

Alt-dol (Alt dols will be copied to here)

Lang (Each language support file will be here)

Other files used by program

1. Crap.config (ip adress of the wii and selected language is stored here)

2. crap.cfg (all information for loaders stored here, you can 
add/remove/change loaders)

3. base.wxd (a wad containing only nandloader used as an host for injection, 
don't rename and install this)

4. altdolbase.wxd (like base.wxd but for the nand option in the alt-dol
types)

You should have the libeay32.dll for the program to work...


Credits 
-------------------------------------------------------
WiiCrazy/I.R.on

ps: No separate credits for Loaders bundled in the program

Thanks
-------------------------------------------------------
Segher Boessenkool (this time used 70)
Omega Frost (WBFSSync's managed c# library)
Dack for WiiScrubber
Kwiirk for YAL (Yet another loader)
Waninkoko (for wad manager)
Team Twiizers (for homebrew channel)
Joda
Sorg (for the nice reorganization of the usbloader by waninkoko)
Skh
Nicksasa, WiiPower,TheLemonMan (for triiforce)
Wiichoxp (got the idea for the triiforce loader)

Translation Contributors
-------------------------------------------------------
Currently none, you can send your translations
to nejat@tepetaklak.com

The muzak you are listening to composed and copyrighted by Jeroen Tel
(http://www.maniacsofnoise.nl/)</value>
  </data>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAQAAQABADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAqAAAAACoAACoqAAAAACoAKgAqAAAVKgAqKioAFRUVAD8VFQAVPxUAPz8VABUVPwA/FT8AFT8
        /AD8/PwAAAAAAAAAC7sLuwAAAAAAAAAAAAAAALuwALuwAAAAAAAAAAAAAAu7ADALuwAAAAAAAAAAAAC7
        uwAwC7uwAAAAAAAAAAALu7sDMwu7uwAAAAAAAAAAu7uwAzMAu7uwAAAAAAAAC7u7sAMzALu7uwAAAAAA
        AAC7u7ADMwC7u7AAAAAAAAAAC7uwMzMwu7sAAAAAAAAAAAC7ADMzMAuwAAAAAAAAAAAACwAzMzALAAAA
        AAAAAAAAAAAAMzMwAAAAAAAAAAAAAAAAAzMzMwAAAAAAAAAAAAAAAAMzMzMAAAAAAAAAAAAAAAADMzMz
        AAAAAAAAAAAAAAAAMzMzMzAAAAAAAAAAAAMAADMzMzMwAAMAAAAAAAAzMAAzMzMzMAAzMAAAAAADMzMA
        MzMzMzADMzMAAAAAMzMzMzMzMzMzMzMzMAAAAAMzMzMzMzMzMzMzMwAAAAAAMzMzMzMzMzMzMzAAAAAA
        AAMzMzMzMzMzMzMAAAAAAAAAMzMzMzMzMzMwAAAAAAAAAAMzMzAAMzMzAAAAAAAAAAAAMzMAAAMzMAAA
        AAAAAAAAAAMwD/8AMwAAAAAAAAAAAAAAAP//8AAAAAAAAAAAAAAAAAD///AAAAAAAAAAAAAAAAAA///w
        AAAAAAAAAAAAAAAAAA//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>